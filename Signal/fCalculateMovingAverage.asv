function y = fCalculateMovingAverage(aData,iFilterWindowSize)
% will compute moving averages of order n (best taken as odd)
%
%Usage: y=moving(x,n[,fun])
%where x 	is the input vector (or matrix) to be smoothed. 
%      m 	is number of points to average over (best odd, but even works)
%      y 	is output vector of same length as x
%      fun  (optional) is a custom function rather than moving averages
%
% Note:if x is a matrix then the smoothing will be done 'vertically'.
% 
%
% Example:
%
% x=randn(300,1);
% plot(x,'g.'); 
% hold on;
% plot(moving(x,7),'k'); 
% plot(moving(x,7,'median'),'r');
% plot(moving(x,7,@(x)max(x)),'b'); 
% legend('x','7pt moving mean','7pt moving median','7pt moving max','location','best')
%
% optimized Aslak Grinsted jan2004
% enhanced Aslak Grinsted Apr2007

if iFilterWindowSize == 1
    y = aData;
    return
end

if size(aData,1) == 1
    aData = aData';
end

f = zeros(iFilterWindowSize,1) + 1/iFilterWindowSize;
n=size(aData,1);
isodd=bitand(iFilterWindowSize,1);
iFilterWindowSize2=floor(iFilterWindowSize/2);


if (size(x,2)==1)
    y=filter(f,1,x);
    y=y([zeros(1,m2-1+isodd)+m,m:n,zeros(1,m2)+n]);
else
    y=filter2(f,x);
    y(1:(m2-~isodd),:)=y(m2+isodd+zeros(m2-~isodd,1),:);
    y((n-m2+1):end,:)=y(n-m2+zeros(m2,1),:);
end

return
